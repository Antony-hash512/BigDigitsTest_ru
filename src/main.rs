mod dynamic_int;

use dynamic_int::DynamicInt;
use std::time::Instant;
use std::thread;
use std::sync::{Arc, mpsc};
use std::sync::atomic::{AtomicUsize, Ordering};
use std::io::{self, Write};

fn main() {
    println!("üî¢ –ü–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DynamicInt");
    println!("================================================");
    
    loop {
        println!("\nüìã –í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:");
        println!("1. üß™ –¢–µ—Å—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª");
        println!("2. üîç –ü–æ–∏—Å–∫ –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ (—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)");
        println!("3. üöÄ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª");
        println!("4. üîÑ –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–π –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ (—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)");
        println!("5. ‚ôæÔ∏è  –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ (—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ)");
        println!("6. üî¢ –¢–µ—Å—Ç –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª");
        println!("7. üîç –ü–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ");
        println!("8. üöÄ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª");
        println!("9. ‚ôæÔ∏è  –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª");
        println!("10. üî• –ü–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞");
        println!("11. üßÆ –¢–µ—Å—Ç —á–∏—Å–µ–ª –ú–µ—Ä—Å–µ–Ω–Ω–∞");
        println!("12. üöÄ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞");
        println!("13. ‚ôæÔ∏è  –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞");
        println!("14. ‚ö° –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ï–≤–∫–ª–∏–¥—É");
        println!("15. üßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞");
        println!("16. üîç –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª-—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ");
        println!("17. üöÄ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤");
        println!("18. ‚ôæÔ∏è  –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤");
        println!("19. ‚ö° –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤");
        println!("20. üßÆ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞");
        println!("21. üö™ –í—ã—Ö–æ–¥");
        println!("\n–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-21): ");
        
        let mut input = String::new();
        io::stdin().read_line(&mut input).expect("–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –≤–≤–æ–¥");
        
        match input.trim() {
            "1" => {
                test_known_perfect_numbers();
            }
            "2" => {
                println!("\nüìä –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞:");
                
                print!("–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut start_input = String::new();
                io::stdin().read_line(&mut start_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let start_num: i128 = start_input.trim().parse().unwrap_or(8129);
                
                print!("–ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut end_input = String::new();
                io::stdin().read_line(&mut end_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let end_num: i128 = end_input.trim().parse().unwrap_or(50000);
                
                search_perfect_numbers_in_range(start_num, end_num);
            }
            "3" => {
                println!("\nüßµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞:");
                
                // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä
                let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                
                print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                io::stdout().flush().unwrap();
                let mut threads_input = String::new();
                io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                
                print!("–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ");
                io::stdout().flush().unwrap();
                let mut start_input = String::new();
                io::stdin().read_line(&mut start_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let start_num: i128 = start_input.trim().parse().unwrap_or(2);
                
                print!("–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000): ");
                io::stdout().flush().unwrap();
                let mut chunk_input = String::new();
                io::stdin().read_line(&mut chunk_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let chunk_size: i128 = chunk_input.trim().parse().unwrap_or(100000);
                
                println!("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫...");
                find_perfect_numbers_multithreaded(num_threads, start_num, chunk_size);
            }
            "4" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    find_perfect_numbers();
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "5" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
                    let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                    println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                    
                    print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                    io::stdout().flush().unwrap();
                    let mut threads_input = String::new();
                    io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                    let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                    
                    find_perfect_numbers_infinite_multithreaded(num_threads);
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "6" => {
                test_prime_numbers();
            }
            "7" => {
                println!("\nüìä –í–≤–µ–¥–∏—Ç–µ –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª:");
                
                print!("–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut start_input = String::new();
                io::stdin().read_line(&mut start_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let start_num: i128 = start_input.trim().parse().unwrap_or(2);
                
                print!("–ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut end_input = String::new();
                io::stdin().read_line(&mut end_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let end_num: i128 = end_input.trim().parse().unwrap_or(100);
                
                search_primes_in_range(start_num, end_num);
            }
            "8" => {
                println!("\nüßµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª:");
                
                let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                
                print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                io::stdout().flush().unwrap();
                let mut threads_input = String::new();
                io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                
                print!("–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 2): ");
                io::stdout().flush().unwrap();
                let mut start_input = String::new();
                io::stdin().read_line(&mut start_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let start_num: i128 = start_input.trim().parse().unwrap_or(2);
                
                print!("–†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100000): ");
                io::stdout().flush().unwrap();
                let mut chunk_input = String::new();
                io::stdin().read_line(&mut chunk_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let chunk_size: i128 = chunk_input.trim().parse().unwrap_or(100000);
                
                println!("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª...");
                find_primes_multithreaded(num_threads, start_num, chunk_size);
            }
            "9" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                    println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                    
                    print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                    io::stdout().flush().unwrap();
                    let mut threads_input = String::new();
                    io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                    let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                    
                    find_primes_infinite_multithreaded(num_threads);
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "10" => {
                println!("\nüî• –ü–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞:");
                
                print!("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ x (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 50): ");
                io::stdout().flush().unwrap();
                let mut max_input = String::new();
                io::stdin().read_line(&mut max_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let max_x: u32 = max_input.trim().parse().unwrap_or(50);
                
                search_perfect_numbers_euclid(max_x);
            }
            "11" => {
                test_mersenne_numbers();
            }
            "12" => {
                println!("\nüßµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞:");
                
                let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                
                print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                io::stdout().flush().unwrap();
                let mut threads_input = String::new();
                io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                
                print!("–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å —Å—Ç–µ–ø–µ–Ω–∏ x (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 100): ");
                io::stdout().flush().unwrap();
                let mut max_input = String::new();
                io::stdin().read_line(&mut max_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let max_x: u32 = max_input.trim().parse().unwrap_or(100);
                
                println!("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞...");
                search_perfect_numbers_euclid_multithreaded(num_threads, max_x);
            }
            "13" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    search_perfect_numbers_euclid_infinite();
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "14" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ –ï–≤–∫–ª–∏–¥—É –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                    println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                    
                    print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                    io::stdout().flush().unwrap();
                    let mut threads_input = String::new();
                    io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                    let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                    
                    search_perfect_numbers_euclid_infinite_multithreaded(num_threads);
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "15" => {
                println!("\nüßÆ –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞:");
                
                print!("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞: ");
                io::stdout().flush().unwrap();
                let mut num_input = String::new();
                io::stdin().read_line(&mut num_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num: i128 = num_input.trim().parse().unwrap_or(10);
                
                calculate_factorial(num);
            }
            "16" => {
                println!("\nüîç –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª-—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ:");
                
                print!("–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut start_input = String::new();
                io::stdin().read_line(&mut start_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let start_num: i128 = start_input.trim().parse().unwrap_or(1);
                
                print!("–ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut end_input = String::new();
                io::stdin().read_line(&mut end_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let end_num: i128 = end_input.trim().parse().unwrap_or(1000000);
                
                search_factorials_in_range(start_num, end_num);
            }
            "17" => {
                println!("\nüßµ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤:");
                
                let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                
                print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                io::stdout().flush().unwrap();
                let mut threads_input = String::new();
                io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                
                print!("–ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut start_input = String::new();
                io::stdin().read_line(&mut start_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let start_num: i128 = start_input.trim().parse().unwrap_or(10);
                
                print!("–ö–æ–Ω–µ—á–Ω–æ–µ —á–∏—Å–ª–æ: ");
                io::stdout().flush().unwrap();
                let mut end_input = String::new();
                io::stdin().read_line(&mut end_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let end_num: i128 = end_input.trim().parse().unwrap_or(20);
                
                println!("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤...");
                calculate_factorials_multithreaded(num_threads, start_num, end_num);
            }
            "18" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    calculate_factorials_infinite();
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "19" => {
                println!("\n‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –æ—á–µ–Ω—å –¥–æ–ª–≥–æ!");
                print!("–í—ã —É–≤–µ—Ä–µ–Ω—ã? (y/N): ");
                io::stdout().flush().unwrap();
                let mut confirm = String::new();
                io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                
                if confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes" {
                    let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                    println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                    
                    print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                    io::stdout().flush().unwrap();
                    let mut threads_input = String::new();
                    io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                    let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                    
                    calculate_factorials_infinite_multithreaded(num_threads);
                } else {
                    println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                }
            }
            "20" => {
                println!("\nüßÆ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞:");
                
                let available_cores = thread::available_parallelism().map(|p| p.get()).unwrap_or(4);
                println!("üíª –î–æ—Å—Ç—É–ø–Ω–æ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —è–¥–µ—Ä: {}", available_cores);
                
                print!("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é {}): ", available_cores);
                io::stdout().flush().unwrap();
                let mut threads_input = String::new();
                io::stdin().read_line(&mut threads_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num_threads = threads_input.trim().parse().unwrap_or(available_cores);
                
                print!("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞: ");
                io::stdout().flush().unwrap();
                let mut num_input = String::new();
                io::stdin().read_line(&mut num_input).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                let num: i128 = num_input.trim().parse().unwrap_or(100);
                
                if num > 10000 {
                    println!("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ! –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è n > 10000 –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!");
                    print!("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ");
                    io::stdout().flush().unwrap();
                    let mut confirm = String::new();
                    io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
                    
                    if !(confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes") {
                        println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
                        continue;
                    }
                }
                
                println!("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ {}! —Å {} –ø–æ—Ç–æ–∫–∞–º–∏...", num, num_threads);
                calculate_factorial_multithreaded(num, num_threads);
            }
            "21" => {
                println!("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!");
                break;
            }
            _ => {
                println!("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        }
        
        println!("\n{}", "=".repeat(50));
    }
}

// –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
fn find_perfect_numbers_multithreaded(num_threads: usize, start_num: i128, chunk_size: i128) {
    println!("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: {}", start_num);
    println!("   üì¶ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫: {}", chunk_size);
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let found_count = Arc::new(AtomicUsize::new(0));
    let checked_count = Arc::new(AtomicUsize::new(0));
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let found_count_clone = Arc::clone(&found_count);
        let checked_count_clone = Arc::clone(&checked_count);
        let thread_start = start_num + (thread_id as i128 * chunk_size);
        let thread_end = thread_start + chunk_size;
        
        let handle = thread::spawn(move || {
            search_in_range_thread(
                thread_id,
                thread_start,
                thread_end,
                tx_clone,
                found_count_clone,
                checked_count_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let found_count_for_msg = Arc::clone(&found_count);
    let checked_count_for_msg = Arc::clone(&checked_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                ThreadMessage::PerfectFound { thread_id, number, type_name, check_time, total_checked } => {
                    let global_found = found_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{}!", global_found);
                    println!("   üìä –ß–∏—Å–ª–æ: {}", number);
                    println!("   üî¢ –¢–∏–ø: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞: {:.3?}", check_time);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}", elapsed_total);
                    println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n", total_checked);
                }
                ThreadMessage::Progress { thread_id, checked_in_thread } => {
                    if checked_in_thread % 50000 == 0 {
                        let total_checked = checked_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_checked as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} | –í—Å–µ–≥–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.0}/—Å–µ–∫", 
                            thread_id, checked_in_thread, total_checked, speed);
                    }
                }
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
    
    let total_time = start_time.elapsed();
    let total_checked_final = checked_count.load(Ordering::SeqCst);
    let total_found_final = found_count.load(Ordering::SeqCst);
    
    println!("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   üßµ –ü–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: {}", total_found_final);
    println!("   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–∏—Å–µ–ª: {}", total_checked_final);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_time);
    println!("   ‚ö° –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {:.0} —á–∏—Å–µ–ª/—Å–µ–∫", total_checked_final as f64 / total_time.as_secs_f64());
}

#[derive(Debug)]
enum ThreadMessage {
    PerfectFound {
        thread_id: usize,
        number: String,
        type_name: String,
        check_time: std::time::Duration,
        total_checked: usize,
    },
    Progress {
        thread_id: usize,
        checked_in_thread: usize,
    },
}

#[derive(Debug)]
enum PrimeThreadMessage {
    PrimeFound {
        thread_id: usize,
        number: String,
        type_name: String,
        check_time: std::time::Duration,
        total_checked: usize,
    },
    Progress {
        thread_id: usize,
        checked_in_thread: usize,
    },
}

fn search_in_range_thread(
    thread_id: usize,
    start: i128,
    end: i128,
    tx: mpsc::Sender<ThreadMessage>,
    _found_count: Arc<AtomicUsize>,
    checked_count: Arc<AtomicUsize>,
) {
    let mut current = DynamicInt::new(start);
    let one = DynamicInt::one();
    let end_num = DynamicInt::new(end);
    let mut checked_in_thread = 0;
    
    while current.lt(&end_num) {
        let check_start = Instant::now();
        
        if current.is_perfect() {
            let check_time = check_start.elapsed();
            let total_checked = checked_count.load(Ordering::SeqCst);
            
            let _ = tx.send(ThreadMessage::PerfectFound {
                thread_id,
                number: current.to_string_value(),
                type_name: current.get_type_name().to_string(),
                check_time,
                total_checked,
            });
        }
        
        checked_in_thread += 1;
        checked_count.fetch_add(1, Ordering::SeqCst);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if checked_in_thread % 10000 == 0 {
            let _ = tx.send(ThreadMessage::Progress {
                thread_id,
                checked_in_thread,
            });
        }
        
        current = current.add(&one);
    }
    
    println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {}-{}", 
        thread_id, checked_in_thread, start, end);
}

fn test_known_perfect_numbers() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞...\n");
    
    // –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: 6, 28, 496, 8128
    let test_numbers = vec![6, 28, 496, 8128];
    
    for num in test_numbers {
        let start_time = Instant::now();
        let dynamic_num = DynamicInt::new(num);
        let is_perfect = dynamic_num.is_perfect();
        let elapsed = start_time.elapsed();
        
        println!("–ß–∏—Å–ª–æ: {} | –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            num, 
            if is_perfect { "‚úÖ" } else { "‚ùå" },
            dynamic_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\nüîç –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª:");
    let non_perfect = vec![5, 7, 10, 12, 100, 1000];
    
    for num in non_perfect {
        let start_time = Instant::now();
        let dynamic_num = DynamicInt::new(num);
        let is_perfect = dynamic_num.is_perfect();
        let elapsed = start_time.elapsed();
        
        println!("–ß–∏—Å–ª–æ: {} | –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            num, 
            if is_perfect { "‚úÖ" } else { "‚ùå" },
            dynamic_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞!");
}

fn search_perfect_numbers_in_range(start: i128, end: i128) {
    println!("üîç –ò—â–µ–º —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {} –¥–æ {}...\n", start, end);
    
    let mut current = DynamicInt::new(start);
    let one = DynamicInt::one();
    let end_num = DynamicInt::new(end);
    let mut found_count = 0;
    let mut checked_count = 0;
    let total_start_time = Instant::now();
    
    while current.lt(&end_num) {
        let start_time = Instant::now();
        
        if current.is_perfect() {
            let elapsed = start_time.elapsed();
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{}!", found_count);
            println!("   üìä –ß–∏—Å–ª–æ: {}", current.to_string_value());
            println!("   üî¢ –¢–∏–ø: {}", current.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {:.3?}", elapsed);
            println!("   üìç –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {}/{}\n", 
                current.to_string_value(), end);
        }
        
        checked_count += 1;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É
        current = current.add(&one);
        
        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 —á–∏—Å–µ–ª
        if checked_count % 5000 == 0 {
            let progress = (checked_count as f64 / (end - start) as f64) * 100.0;
            println!("üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —á–∏—Å–µ–ª ({:.1}%)", checked_count, progress);
        }
    }
    
    let total_elapsed = total_start_time.elapsed();
    println!("\nüìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞:");
    println!("   üî¢ –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}", start, end);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: {}", found_count);
    println!("   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}", checked_count);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_elapsed);
    println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {:.0} —á–∏—Å–µ–ª/—Å–µ–∫", 
        checked_count as f64 / total_elapsed.as_secs_f64());
    
    if found_count == 0 {
        println!("   üí° –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ 8128 = 33550336 (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ!)");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
fn find_perfect_numbers() {
    println!("üîç –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª...\n");
    println!("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!");
    println!("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let mut current = DynamicInt::new(2); // –ù–∞—á–∏–Ω–∞–µ–º —Å 2
    let one = DynamicInt::one();
    let mut found_count = 0;
    let mut checked_count = 0;
    
    loop {
        let start_time = Instant::now();
        
        if current.is_perfect() {
            let elapsed = start_time.elapsed();
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{}!", found_count);
            println!("   üìä –ß–∏—Å–ª–æ: {}", current.to_string_value());
            println!("   üî¢ –¢–∏–ø: {}", current.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {:.2?}", elapsed);
            println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n", checked_count);
        }
        
        checked_count += 1;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É
        current = current.add(&one);
        
        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 —á–∏—Å–µ–ª
        //if checked_count % 1000000 == 0 {
        //    println!("üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —á–∏—Å–µ–ª", checked_count);
        //}
    }
}

fn test1() {
    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    let num1 = DynamicInt::new(i128::MAX - 10);
    let num2 = DynamicInt::new(20);

    println!("num1: {}", num1.to_string_value());
    println!("num2: {}", num2.to_string_value());

    // –°–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ i128
    let sum = num1.add(&num2);
    println!("–°—É–º–º–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è Big): {}", sum.to_string_value());
    if let DynamicInt::Big(_) = sum {
        println!("–°—É–º–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–ª–∞ BigInt!");
    }

    let small_sum = DynamicInt::new(5).add(&DynamicInt::new(10));
    println!("–ú–∞–ª–∞—è —Å—É–º–º–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è Small): {}", small_sum.to_string_value());
    if let DynamicInt::Small(_) = small_sum {
        println!("–ú–∞–ª–∞—è —Å—É–º–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å Small!");
    }

    // –£–º–Ω–æ–∂–µ–Ω–∏–µ
    let large_num_i128 = i128::MAX / 2;
    let mul1 = DynamicInt::new(large_num_i128);
    let mul2 = DynamicInt::new(3); // –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 3 –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç i128::MAX

    println!("\nmul1: {}", mul1.to_string_value());
    println!("mul2: {}", mul2.to_string_value());

    let product = mul1.mul(&mul2);
    println!("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–æ–∂–∏–¥–∞–µ—Ç—Å—è Big): {}", product.to_string_value());
    if let DynamicInt::Big(_) = product {
        println!("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–ª–æ BigInt!");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
fn find_perfect_numbers_infinite_multithreaded(num_threads: usize) {
    println!("‚ôæÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üì¶ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫: 1,000,000 —á–∏—Å–µ–ª");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let found_count = Arc::new(AtomicUsize::new(0));
    let checked_count = Arc::new(AtomicUsize::new(0));
    let current_start = Arc::new(AtomicUsize::new(2)); // –ù–∞—á–∏–Ω–∞–µ–º —Å 2
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let found_count_clone = Arc::clone(&found_count);
        let checked_count_clone = Arc::clone(&checked_count);
        let current_start_clone = Arc::clone(&current_start);
        
        let handle = thread::spawn(move || {
            infinite_search_thread(
                thread_id,
                tx_clone,
                found_count_clone,
                checked_count_clone,
                current_start_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let found_count_for_msg = Arc::clone(&found_count);
    let checked_count_for_msg = Arc::clone(&checked_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                ThreadMessage::PerfectFound { thread_id, number, type_name, check_time, total_checked } => {
                    let global_found = found_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{}!", global_found);
                    println!("   üìä –ß–∏—Å–ª–æ: {}", number);
                    println!("   üî¢ –¢–∏–ø: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞: {:.3?}", check_time);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}", elapsed_total);
                    println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n", total_checked);
                }
                ThreadMessage::Progress { thread_id, checked_in_thread } => {
                    if checked_in_thread % 100000 == 0 {
                        let total_checked = checked_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_checked as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} | –í—Å–µ–≥–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.0}/—Å–µ–∫", 
                            thread_id, checked_in_thread, total_checked, speed);
                    }
                }
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ)
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
}

fn infinite_search_thread(
    thread_id: usize,
    tx: mpsc::Sender<ThreadMessage>,
    _found_count: Arc<AtomicUsize>,
    checked_count: Arc<AtomicUsize>,
    current_start: Arc<AtomicUsize>,
) {
    let chunk_size = 1000000_i128; // 1 –º–∏–ª–ª–∏–æ–Ω —á–∏—Å–µ–ª –Ω–∞ –±–ª–æ–∫
    let mut checked_in_thread = 0;
    
    loop {
        // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        let start = current_start.fetch_add(chunk_size as usize, Ordering::SeqCst) as i128;
        let end = start + chunk_size;
        
        println!("üßµ –ü–æ—Ç–æ–∫ #{} –Ω–∞—á–∏–Ω–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç–∫—É –¥–∏–∞–ø–∞–∑–æ–Ω–∞ {}-{}", thread_id, start, end);
        
        let mut current = DynamicInt::new(start);
        let one = DynamicInt::one();
        let end_num = DynamicInt::new(end);
        
        while current.lt(&end_num) {
            let check_start = Instant::now();
            
            if current.is_perfect() {
                let check_time = check_start.elapsed();
                let total_checked = checked_count.load(Ordering::SeqCst);
                
                let _ = tx.send(ThreadMessage::PerfectFound {
                    thread_id,
                    number: current.to_string_value(),
                    type_name: current.get_type_name().to_string(),
                    check_time,
                    total_checked,
                });
            }
            
            checked_in_thread += 1;
            checked_count.fetch_add(1, Ordering::SeqCst);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if checked_in_thread % 50000 == 0 {
                let _ = tx.send(ThreadMessage::Progress {
                    thread_id,
                    checked_in_thread,
                });
            }
            
            current = current.add(&one);
        }
        
        println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω {}-{}, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", 
            thread_id, start, end);
    }
}

#[derive(Debug)]
enum FactorialThreadMessage {
    FactorialCalculated {
        thread_id: usize,
        number: i128,
        factorial: String,
        type_name: String,
        calculation_time: std::time::Duration,
        decimal_length: usize,
    },
    FactorialFound {
        thread_id: usize,
        number: String,
        factorial_of: i128,
        type_name: String,
        check_time: std::time::Duration,
    },
    Progress {
        thread_id: usize,
        current_number: i128,
        checked_count: usize,
    },
}

// –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∏—Å–ª–∞
fn calculate_factorial(n: i128) {
    println!("üßÆ –í—ã—á–∏—Å–ª—è–µ–º {}!...\n", n);
    
    if n < 0 {
        println!("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª!");
        return;
    }
    
    if n > 1000 {
        println!("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ –¥–ª—è n > 1000 –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!");
        print!("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ");
        io::stdout().flush().unwrap();
        let mut confirm = String::new();
        io::stdin().read_line(&mut confirm).expect("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è");
        
        if !(confirm.trim().to_lowercase() == "y" || confirm.trim().to_lowercase() == "yes") {
            println!("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.");
            return;
        }
    }
    
    let start_time = Instant::now();
    let factorial = DynamicInt::factorial_of(n);
    let calculation_time = start_time.elapsed();
    
    let decimal_length = factorial.to_string_value().len();
    
    println!("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –í–´–ß–ò–°–õ–ï–ù–ò–Ø –§–ê–ö–¢–û–†–ò–ê–õ–ê:");
    println!("   üìä –ß–∏—Å–ª–æ: {}", n);
    println!("   üßÆ –§–∞–∫—Ç–æ—Ä–∏–∞–ª {}!: {}", n, factorial.to_string_value());
    println!("   üî¢ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {}", factorial.get_type_name());
    println!("   üìê –î–ª–∏–Ω–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö: {}", decimal_length);
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", calculation_time);
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if decimal_length > 100 {
        println!("   üí° –ü–µ—Ä–≤—ã–µ 50 —Ü–∏—Ñ—Ä: {}...", &factorial.to_string_value()[..50]);
        println!("   üí° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ü–∏—Ñ—Ä: ...{}", &factorial.to_string_value()[decimal_length-50..]);
    }
    
    println!("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    if calculation_time.as_secs_f64() > 0.001 {
        let ops_per_sec = n as f64 / calculation_time.as_secs_f64();
        println!("   ‚ö° –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {:.0} –æ–ø–µ—Ä–∞—Ü–∏–π/—Å–µ–∫", ops_per_sec);
    }
}

// –ü–æ–∏—Å–∫ —á–∏—Å–µ–ª-—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
fn search_factorials_in_range(start: i128, end: i128) {
    println!("üîç –ò—â–µ–º —á–∏—Å–ª–∞-—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {} –¥–æ {}...\n", start, end);
    
    let mut current = DynamicInt::new(start);
    let one = DynamicInt::one();
    let end_num = DynamicInt::new(end);
    let mut found_count = 0;
    let mut checked_count = 0;
    let total_start_time = Instant::now();
    
    while current.lt(&end_num) {
        let start_time = Instant::now();
        let (is_factorial, factorial_of) = current.is_factorial();
        let elapsed = start_time.elapsed();
        
        if is_factorial {
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –ß–ò–°–õ–û-–§–ê–ö–¢–û–†–ò–ê–õ ‚Ññ{}!", found_count);
            println!("   üìä –ß–∏—Å–ª–æ: {}", current.to_string_value());
            println!("   üßÆ –≠—Ç–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª: {}! = {}", factorial_of, current.to_string_value());
            println!("   üî¢ –¢–∏–ø: {}", current.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {:.3?}", elapsed);
            println!("   üìç –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {}/{}\n", 
                current.to_string_value(), end);
        }
        
        checked_count += 1;
        current = current.add(&one);
        
        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 100000 —á–∏—Å–µ–ª
        if checked_count % 100000 == 0 {
            let progress = (checked_count as f64 / (end - start) as f64) * 100.0;
            let speed = checked_count as f64 / total_start_time.elapsed().as_secs_f64();
            println!("üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —á–∏—Å–µ–ª ({:.1}%) | –°–∫–æ—Ä–æ—Å—Ç—å: {:.0}/—Å–µ–∫", 
                checked_count, progress, speed);
        }
    }
    
    let total_elapsed = total_start_time.elapsed();
    println!("\nüìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞:");
    println!("   üî¢ –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}", start, end);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —á–∏—Å–µ–ª-—Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤: {}", found_count);
    println!("   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}", checked_count);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_elapsed);
    println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {:.0} —á–∏—Å–µ–ª/—Å–µ–∫", 
        checked_count as f64 / total_elapsed.as_secs_f64());
}

// –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤
fn calculate_factorials_multithreaded(num_threads: usize, start_num: i128, end_num: i128) {
    println!("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìä –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}", start_num, end_num);
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let calculated_count = Arc::new(AtomicUsize::new(0));
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    let numbers_per_thread = (end_num - start_num + 1) / num_threads as i128;
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let calculated_count_clone = Arc::clone(&calculated_count);
        let thread_start = start_num + (thread_id as i128 * numbers_per_thread);
        let thread_end = if thread_id == num_threads - 1 {
            end_num
        } else {
            thread_start + numbers_per_thread - 1
        };
        
        let handle = thread::spawn(move || {
            calculate_factorials_thread(
                thread_id,
                thread_start,
                thread_end,
                tx_clone,
                calculated_count_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    let calculated_count_for_msg = Arc::clone(&calculated_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                FactorialThreadMessage::FactorialCalculated { 
                    thread_id, number, factorial, type_name, calculation_time, decimal_length 
                } => {
                    let global_calculated = calculated_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –í–´–ß–ò–°–õ–ï–ù –§–ê–ö–¢–û–†–ò–ê–õ ‚Ññ{}!", global_calculated);
                    println!("   üìä –ß–∏—Å–ª–æ: {}", number);
                    println!("   üßÆ –§–∞–∫—Ç–æ—Ä–∏–∞–ª: {}", if decimal_length > 100 { 
                        format!("{}...{} ({} —Ü–∏—Ñ—Ä)", 
                            &factorial[..50], 
                            &factorial[decimal_length-50..], 
                            decimal_length)
                    } else { 
                        factorial 
                    });
                    println!("   üî¢ –¢–∏–ø: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", calculation_time);
                    println!("   üìê –î–ª–∏–Ω–∞: {} —Ü–∏—Ñ—Ä", decimal_length);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}\n", elapsed_total);
                }
                FactorialThreadMessage::Progress { thread_id, current_number, checked_count } => {
                    if checked_count % 5 == 0 {
                        let total_calculated = calculated_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_calculated as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è {}! | –í—Å–µ–≥–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.2}/—Å–µ–∫", 
                            thread_id, current_number, total_calculated, speed);
                    }
                }
                _ => {}
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
    
    let total_time = start_time.elapsed();
    let total_calculated_final = calculated_count.load(Ordering::SeqCst);
    
    println!("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–∏—è:");
    println!("   üßµ –ü–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìä –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}", start_num, end_num);
    println!("   ‚úÖ –í—ã—á–∏—Å–ª–µ–Ω–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤: {}", total_calculated_final);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_time);
    println!("   ‚ö° –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {:.2} —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤/—Å–µ–∫", 
        total_calculated_final as f64 / total_time.as_secs_f64());
}

fn calculate_factorials_thread(
    thread_id: usize,
    start: i128,
    end: i128,
    tx: mpsc::Sender<FactorialThreadMessage>,
    calculated_count: Arc<AtomicUsize>,
) {
    let mut checked_in_thread = 0;
    
    for n in start..=end {
        let calculation_start = Instant::now();
        let factorial = DynamicInt::factorial_of(n);
        let calculation_time = calculation_start.elapsed();
        
        let decimal_length = factorial.to_string_value().len();
        
        checked_in_thread += 1;
        calculated_count.fetch_add(1, Ordering::SeqCst);
        
        let _ = tx.send(FactorialThreadMessage::FactorialCalculated {
            thread_id,
            number: n,
            factorial: factorial.to_string_value(),
            type_name: factorial.get_type_name().to_string(),
            calculation_time,
            decimal_length,
        });
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        let _ = tx.send(FactorialThreadMessage::Progress {
            thread_id,
            current_number: n,
            checked_count: checked_in_thread,
        });
    }
    
    println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–µ–Ω. –í—ã—á–∏—Å–ª–µ–Ω–æ {} —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {}-{}", 
        thread_id, checked_in_thread, start, end);
}

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤
fn calculate_factorials_infinite() {
    println!("‚ôæÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤...");
    println!("   üî¢ –ù–∞—á–∏–Ω–∞–µ–º —Å 1! –∏ –∏–¥—ë–º –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let mut n = 1_i128;
    let mut calculated_count = 0;
    let start_time = Instant::now();
    
    loop {
        let calculation_start = Instant::now();
        let factorial = DynamicInt::factorial_of(n);
        let calculation_time = calculation_start.elapsed();
        
        calculated_count += 1;
        let decimal_length = factorial.to_string_value().len();
        
        println!("üéâ –í–´–ß–ò–°–õ–ï–ù –§–ê–ö–¢–û–†–ò–ê–õ ‚Ññ{}!", calculated_count);
        println!("   üìä –ß–∏—Å–ª–æ: {}", n);
        println!("   üßÆ –§–∞–∫—Ç–æ—Ä–∏–∞–ª {}!: {}", n, if decimal_length > 100 { 
            format!("{}...{} ({} —Ü–∏—Ñ—Ä)", 
                &factorial.to_string_value()[..50], 
                &factorial.to_string_value()[decimal_length-50..], 
                decimal_length)
        } else { 
            factorial.to_string_value() 
        });
        println!("   üî¢ –¢–∏–ø: {}", factorial.get_type_name());
        println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", calculation_time);
        println!("   üìê –î–ª–∏–Ω–∞: {} —Ü–∏—Ñ—Ä", decimal_length);
        
        let total_elapsed = start_time.elapsed();
        println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}", total_elapsed);
        println!("   üìç –í—Å–µ–≥–æ –≤—ã—á–∏—Å–ª–µ–Ω–æ: {}\n", calculated_count);
        
        n += 1;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if n <= 0 {
            println!("‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ i128!");
            break;
        }
    }
}

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤
fn calculate_factorials_infinite_multithreaded(num_threads: usize) {
    println!("‚ôæÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üì¶ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫: 100 —á–∏—Å–µ–ª");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let calculated_count = Arc::new(AtomicUsize::new(0));
    let current_n = Arc::new(AtomicUsize::new(1)); // –ù–∞—á–∏–Ω–∞–µ–º —Å 1
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let calculated_count_clone = Arc::clone(&calculated_count);
        let current_n_clone = Arc::clone(&current_n);
        
        let handle = thread::spawn(move || {
            infinite_factorial_calculation_thread(
                thread_id,
                tx_clone,
                calculated_count_clone,
                current_n_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    let calculated_count_for_msg = Arc::clone(&calculated_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                FactorialThreadMessage::FactorialCalculated { 
                    thread_id, number, factorial, type_name, calculation_time, decimal_length 
                } => {
                    let global_calculated = calculated_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –í–´–ß–ò–°–õ–ï–ù –§–ê–ö–¢–û–†–ò–ê–õ ‚Ññ{}!", global_calculated);
                    println!("   üìä –ß–∏—Å–ª–æ: {}", number);
                    println!("   üßÆ –§–∞–∫—Ç–æ—Ä–∏–∞–ª: {}", if decimal_length > 100 { 
                        format!("{}...{} ({} —Ü–∏—Ñ—Ä)", 
                            &factorial[..50], 
                            &factorial[decimal_length-50..], 
                            decimal_length)
                    } else { 
                        factorial 
                    });
                    println!("   üî¢ –¢–∏–ø: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", calculation_time);
                    println!("   üìê –î–ª–∏–Ω–∞: {} —Ü–∏—Ñ—Ä", decimal_length);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}\n", elapsed_total);
                }
                FactorialThreadMessage::Progress { thread_id, current_number, checked_count } => {
                    if checked_count % 10 == 0 {
                        let total_calculated = calculated_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_calculated as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è {}! | –í—Å–µ–≥–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.2}/—Å–µ–∫", 
                            thread_id, current_number, total_calculated, speed);
                    }
                }
                _ => {}
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º —Ä–µ–∂–∏–º–µ)
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
}

fn infinite_factorial_calculation_thread(
    thread_id: usize,
    tx: mpsc::Sender<FactorialThreadMessage>,
    calculated_count: Arc<AtomicUsize>,
    current_n: Arc<AtomicUsize>,
) {
    let chunk_size = 100_i128; // 100 —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ –Ω–∞ –±–ª–æ–∫
    let mut checked_in_thread = 0;
    
    loop {
        // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        let start_n = current_n.fetch_add(chunk_size as usize, Ordering::SeqCst) as i128;
        let end_n = start_n + chunk_size;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ
        if start_n <= 0 || start_n >= i128::MAX - chunk_size {
            println!("‚ö†Ô∏è  –ü–æ—Ç–æ–∫ #{} –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è i128", thread_id);
            break;
        }
        
        println!("üßµ –ü–æ—Ç–æ–∫ #{} –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–æ–≤ {}-{}", 
            thread_id, start_n, end_n - 1);
        
        for n in start_n..end_n {
            let calculation_start = Instant::now();
            let factorial = DynamicInt::factorial_of(n);
            let calculation_time = calculation_start.elapsed();
            
            checked_in_thread += 1;
            calculated_count.fetch_add(1, Ordering::SeqCst);
            
            let decimal_length = factorial.to_string_value().len();
            
            let _ = tx.send(FactorialThreadMessage::FactorialCalculated {
                thread_id,
                number: n,
                factorial: factorial.to_string_value(),
                type_name: factorial.get_type_name().to_string(),
                calculation_time,
                decimal_length,
            });
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            let _ = tx.send(FactorialThreadMessage::Progress {
                thread_id,
                current_number: n,
                checked_count: checked_in_thread,
            });
        }
        
        println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω {}-{}, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", 
            thread_id, start_n, end_n - 1);
    }
}

// –ü–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞: 2^(x-1) * (2^x - 1)
fn search_perfect_numbers_euclid(max_x: u32) {
    println!("üî• –ü–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞...");
    println!("   üìê –§–æ—Ä–º—É–ª–∞: 2^(x-1) * (2^x - 1), –≥–¥–µ 2^x - 1 - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –ú–µ—Ä—Å–µ–Ω–Ω–∞");
    println!("   üìä –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å x: {}\n", max_x);
    
    let mut found_count = 0;
    let mut checked_mersenne = 0;
    let total_start_time = Instant::now();
    
    for x in 2..=max_x {
        let mersenne_check_start = Instant::now();
        let is_mersenne_prime = DynamicInt::is_mersenne_prime(x);
        let mersenne_check_time = mersenne_check_start.elapsed();
        
        checked_mersenne += 1;
        
        if is_mersenne_prime {
            let perfect_calc_start = Instant::now();
            let mersenne_num = DynamicInt::mersenne_number(x);
            let perfect_num = DynamicInt::euclid_perfect_number(x);
            let perfect_calc_time = perfect_calc_start.elapsed();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —á–∏—Å–ª–æ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ
            let verification_start = Instant::now();
            let is_actually_perfect = perfect_num.is_perfect();
            let verification_time = verification_start.elapsed();
            
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{} –ü–û –§–û–†–ú–£–õ–ï –ï–í–ö–õ–ò–î–ê!", found_count);
            println!("   üìè –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å x: {}", x);
            println!("   üî¢ –ß–∏—Å–ª–æ –ú–µ—Ä—Å–µ–Ω–Ω–∞ 2^{}-1: {}", x, mersenne_num.to_string_value());
            println!("   üéØ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {}", perfect_num.to_string_value());
            println!("   üìä –¢–∏–ø —á–∏—Å–ª–∞: {}", perfect_num.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–µ—Ä—Å–µ–Ω–Ω–∞: {:.3?}", mersenne_check_time);
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ: {:.3?}", perfect_calc_time);
            println!("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: {} ({:.3?})", 
                if is_actually_perfect { "‚úÖ" } else { "‚ùå" }, verification_time);
            
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–ª–∏–Ω—É —á–∏—Å–ª–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö
            let decimal_length = perfect_num.to_string_value().len();
            println!("   üìê –î–ª–∏–Ω–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö: {}\n", decimal_length);
        } else {
            if x <= 20 || x % 10 == 0 {
                println!("üîç x={}: –ú–µ—Ä—Å–µ–Ω–Ω–∞ 2^{}-1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º —á–∏—Å–ª–æ–º ({:.3?})", 
                    x, x, mersenne_check_time);
            }
        }
    }
    
    let total_elapsed = total_start_time.elapsed();
    println!("\nüìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞:");
    println!("   üìè –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π x: {} (–æ—Ç 2 –¥–æ {})", checked_mersenne, max_x);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: {}", found_count);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_elapsed);
    println!("   ‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {:.3} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π/—Å–µ–∫", 
        checked_mersenne as f64 / total_elapsed.as_secs_f64());
    
    if found_count > 0 {
        println!("   üí° –§–æ—Ä–º—É–ª–∞ –ï–≤–∫–ª–∏–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç! –í—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ.");
    }
}

// –¢–µ—Å—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —á–∏—Å–µ–ª –ú–µ—Ä—Å–µ–Ω–Ω–∞
fn test_mersenne_numbers() {
    println!("üßÆ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —á–∏—Å–ª–∞ –ú–µ—Ä—Å–µ–Ω–Ω–∞...\n");
    
    // –ü–µ—Ä–≤—ã–µ –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –ú–µ—Ä—Å–µ–Ω–Ω–∞ (–ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Å—Ç–µ–ø–µ–Ω–∏)
    let known_mersenne_primes = vec![2, 3, 5, 7, 13, 17, 19, 31];
    
    println!("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –ú–µ—Ä—Å–µ–Ω–Ω–∞:");
    for x in &known_mersenne_primes {
        let start_time = Instant::now();
        let mersenne_num = DynamicInt::mersenne_number(*x);
        let is_prime = mersenne_num.is_prime();
        let elapsed = start_time.elapsed();
        
        println!("2^{}-1 = {} | –ü—Ä–æ—Å—Ç–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            x, 
            mersenne_num.to_string_value(),
            if is_prime { "‚úÖ" } else { "‚ùå" },
            mersenne_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\n‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–∏—Å–ª–∞, –∫–æ—Ç–æ—Ä—ã–µ –ù–ï –¥–∞—é—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –ú–µ—Ä—Å–µ–Ω–Ω–∞:");
    let non_mersenne = vec![4, 6, 8, 9, 10, 11, 12, 14, 15, 16];
    
    for x in &non_mersenne {
        let start_time = Instant::now();
        let mersenne_num = DynamicInt::mersenne_number(*x);
        let is_prime = mersenne_num.is_prime();
        let elapsed = start_time.elapsed();
        
        println!("2^{}-1 = {} | –ü—Ä–æ—Å—Ç–æ–µ: {} | –í—Ä–µ–º—è: {:.3?}",
            x, 
            mersenne_num.to_string_value(),
            if is_prime { "‚úÖ" } else { "‚ùå" },
            elapsed
        );
    }
    
    println!("\nüéØ –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞:");
    for x in &known_mersenne_primes[..4] { // –ü–µ—Ä–≤—ã–µ 4 –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
        let start_time = Instant::now();
        let perfect_num = DynamicInt::euclid_perfect_number(*x);
        let is_perfect = perfect_num.is_perfect();
        let elapsed = start_time.elapsed();
        
        println!("x={}: 2^{} * (2^{}-1) = {} | –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ: {} | –í—Ä–µ–º—è: {:.3?}",
            x, x-1, x, 
            perfect_num.to_string_value(),
            if is_perfect { "‚úÖ" } else { "‚ùå" },
            elapsed
        );
    }
    
    println!("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —á–∏—Å–ª–∞ –ú–µ—Ä—Å–µ–Ω–Ω–∞ –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞!");
}

#[derive(Debug)]
enum EuclidThreadMessage {
    PerfectFound {
        thread_id: usize,
        x: u32,
        mersenne_number: String,
        perfect_number: String,
        type_name: String,
        mersenne_time: std::time::Duration,
        perfect_time: std::time::Duration,
        verification_time: std::time::Duration,
        decimal_length: usize,
    },
    Progress {
        thread_id: usize,
        current_x: u32,
        checked_count: usize,
    },
}

// –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞
fn search_perfect_numbers_euclid_multithreaded(num_threads: usize, max_x: u32) {
    println!("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìè –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å x: {}", max_x);
    println!("   üìê –§–æ—Ä–º—É–ª–∞: 2^(x-1) * (2^x - 1), –≥–¥–µ 2^x - 1 - –ø—Ä–æ—Å—Ç–æ–µ");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let found_count = Arc::new(AtomicUsize::new(0));
    let checked_count = Arc::new(AtomicUsize::new(0));
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    let chunk_size = (max_x - 2 + 1) / num_threads as u32 + 1;
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let found_count_clone = Arc::clone(&found_count);
        let checked_count_clone = Arc::clone(&checked_count);
        let start_x = 2 + (thread_id as u32 * chunk_size);
        let end_x = std::cmp::min(start_x + chunk_size, max_x + 1);
        
        if start_x < end_x {
            let handle = thread::spawn(move || {
                search_euclid_thread(
                    thread_id,
                    start_x,
                    end_x,
                    tx_clone,
                    found_count_clone,
                    checked_count_clone,
                );
            });
            
            handles.push(handle);
        }
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let found_count_for_msg = Arc::clone(&found_count);
    let checked_count_for_msg = Arc::clone(&checked_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                EuclidThreadMessage::PerfectFound { 
                    thread_id, x, mersenne_number, perfect_number, type_name,
                    mersenne_time, perfect_time, verification_time, decimal_length
                } => {
                    let global_found = found_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{} –ü–û –§–û–†–ú–£–õ–ï –ï–í–ö–õ–ò–î–ê!", global_found);
                    println!("   üìè –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å x: {}", x);
                    println!("   üî¢ –ß–∏—Å–ª–æ –ú–µ—Ä—Å–µ–Ω–Ω–∞ 2^{}-1: {}", x, mersenne_number);
                    println!("   üéØ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {}", perfect_number);
                    println!("   üìä –¢–∏–ø —á–∏—Å–ª–∞: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–µ—Ä—Å–µ–Ω–Ω–∞: {:.3?}", mersenne_time);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", perfect_time);
                    println!("   ‚úÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: {:.3?}", verification_time);
                    println!("   üìê –î–ª–∏–Ω–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö: {}", decimal_length);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}\n", elapsed_total);
                }
                EuclidThreadMessage::Progress { thread_id, current_x, checked_count } => {
                    if checked_count % 50 == 0 {
                        let total_checked = checked_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_checked as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è x={} | –í—Å–µ–≥–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.2}/—Å–µ–∫", 
                            thread_id, current_x, total_checked, speed);
                    }
                }
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
    
    let total_time = start_time.elapsed();
    let total_checked_final = checked_count.load(Ordering::SeqCst);
    let total_found_final = found_count.load(Ordering::SeqCst);
    
    println!("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ –ï–≤–∫–ª–∏–¥—É:");
    println!("   üßµ –ü–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìè –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π x: {} (–æ—Ç 2 –¥–æ {})", total_checked_final, max_x);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: {}", total_found_final);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_time);
    println!("   ‚ö° –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {:.2} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π/—Å–µ–∫", total_checked_final as f64 / total_time.as_secs_f64());
    
    if total_found_final > 0 {
        println!("   üí° –§–æ—Ä–º—É–ª–∞ –ï–≤–∫–ª–∏–¥–∞ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞!");
    }
}

fn search_euclid_thread(
    thread_id: usize,
    start_x: u32,
    end_x: u32,
    tx: mpsc::Sender<EuclidThreadMessage>,
    _found_count: Arc<AtomicUsize>,
    checked_count: Arc<AtomicUsize>,
) {
    let mut checked_in_thread = 0;
    
    for x in start_x..end_x {
        let mersenne_check_start = Instant::now();
        let is_mersenne_prime = DynamicInt::is_mersenne_prime(x);
        let mersenne_time = mersenne_check_start.elapsed();
        
        checked_in_thread += 1;
        checked_count.fetch_add(1, Ordering::SeqCst);
        
        if is_mersenne_prime {
            let perfect_calc_start = Instant::now();
            let mersenne_num = DynamicInt::mersenne_number(x);
            let perfect_num = DynamicInt::euclid_perfect_number(x);
            let perfect_time = perfect_calc_start.elapsed();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
            let verification_start = Instant::now();
            let _is_actually_perfect = perfect_num.is_perfect();
            let verification_time = verification_start.elapsed();
            
            let decimal_length = perfect_num.to_string_value().len();
            
            let _ = tx.send(EuclidThreadMessage::PerfectFound {
                thread_id,
                x,
                mersenne_number: mersenne_num.to_string_value(),
                perfect_number: perfect_num.to_string_value(),
                type_name: perfect_num.get_type_name().to_string(),
                mersenne_time,
                perfect_time,
                verification_time,
                decimal_length,
            });
        }
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if checked_in_thread % 10 == 0 {
            let _ = tx.send(EuclidThreadMessage::Progress {
                thread_id,
                current_x: x,
                checked_count: checked_in_thread,
            });
        }
    }
    
    println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π x –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {}-{}", 
        thread_id, checked_in_thread, start_x, end_x - 1);
}

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞
fn search_perfect_numbers_euclid_infinite() {
    println!("‚ôæÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞...");
    println!("   üìê –§–æ—Ä–º—É–ª–∞: 2^(x-1) * (2^x - 1), –≥–¥–µ 2^x - 1 - –ø—Ä–æ—Å—Ç–æ–µ —á–∏—Å–ª–æ –ú–µ—Ä—Å–µ–Ω–Ω–∞");
    println!("   üî¢ –ù–∞—á–∏–Ω–∞–µ–º —Å x=2 –∏ –∏–¥—ë–º –¥–æ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let mut found_count = 0;
    let mut checked_count = 0;
    let start_time = Instant::now();
    let mut x = 2_u32;
    
    loop {
        let mersenne_check_start = Instant::now();
        let is_mersenne_prime = DynamicInt::is_mersenne_prime(x);
        let mersenne_check_time = mersenne_check_start.elapsed();
        
        checked_count += 1;
        
        if is_mersenne_prime {
            let perfect_calc_start = Instant::now();
            let mersenne_num = DynamicInt::mersenne_number(x);
            let perfect_num = DynamicInt::euclid_perfect_number(x);
            let perfect_calc_time = perfect_calc_start.elapsed();
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
            let verification_start = Instant::now();
            let is_actually_perfect = perfect_num.is_perfect();
            let verification_time = verification_start.elapsed();
            
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{} –ü–û –§–û–†–ú–£–õ–ï –ï–í–ö–õ–ò–î–ê!", found_count);
            println!("   üìè –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å x: {}", x);
            println!("   üî¢ –ß–∏—Å–ª–æ –ú–µ—Ä—Å–µ–Ω–Ω–∞ 2^{}-1: {}", x, mersenne_num.to_string_value());
            println!("   üéØ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {}", perfect_num.to_string_value());
            println!("   üìä –¢–∏–ø —á–∏—Å–ª–∞: {}", perfect_num.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–µ—Ä—Å–µ–Ω–Ω–∞: {:.3?}", mersenne_check_time);
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–≥–æ: {:.3?}", perfect_calc_time);
            println!("   ‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: {} ({:.3?})", 
                if is_actually_perfect { "‚úÖ" } else { "‚ùå" }, verification_time);
            
            let decimal_length = perfect_num.to_string_value().len();
            println!("   üìê –î–ª–∏–Ω–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö: {}", decimal_length);
            
            let total_elapsed = start_time.elapsed();
            println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}", total_elapsed);
            println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π: {}\n", checked_count);
        } else {
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –¥–ª—è –±–æ–ª—å—à–∏—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
            if x <= 50 || x % 100 == 0 {
                let total_elapsed = start_time.elapsed();
                let speed = checked_count as f64 / total_elapsed.as_secs_f64();
                println!("üîç x={}: –ú–µ—Ä—Å–µ–Ω–Ω–∞ 2^{}-1 –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø—Ä–æ—Å—Ç—ã–º | –í—Ä–µ–º—è: {:.3?} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.2}/—Å–µ–∫", 
                    x, x, mersenne_check_time, speed);
            }
        }
        
        x = x.checked_add(1).unwrap_or_else(|| {
            println!("‚ö†Ô∏è  –î–æ—Å—Ç–∏–≥–Ω—É—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –ø–æ–∫–∞–∑–∞—Ç–µ–ª—å u32!");
            u32::MAX
        });
        
        if x == u32::MAX {
            break;
        }
    }
    
    let total_elapsed = start_time.elapsed();
    println!("\nüìä –ò—Ç–æ–≥–∏ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞:");
    println!("   üìè –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π x: {}", checked_count);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: {}", found_count);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_elapsed);
    println!("   ‚ö° –°—Ä–µ–¥–Ω—è—è —Å–∫–æ—Ä–æ—Å—Ç—å: {:.3} –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π/—Å–µ–∫", 
        checked_count as f64 / total_elapsed.as_secs_f64());
}

// –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞
fn search_perfect_numbers_euclid_infinite_multithreaded(num_threads: usize) {
    println!("‚ôæÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø–æ —Ñ–æ—Ä–º—É–ª–µ –ï–≤–∫–ª–∏–¥–∞...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìê –§–æ—Ä–º—É–ª–∞: 2^(x-1) * (2^x - 1), –≥–¥–µ 2^x - 1 - –ø—Ä–æ—Å—Ç–æ–µ");
    println!("   üì¶ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫: 1,000 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π x");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let found_count = Arc::new(AtomicUsize::new(0));
    let checked_count = Arc::new(AtomicUsize::new(0));
    let current_x = Arc::new(AtomicUsize::new(2)); // –ù–∞—á–∏–Ω–∞–µ–º —Å x=2
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let found_count_clone = Arc::clone(&found_count);
        let checked_count_clone = Arc::clone(&checked_count);
        let current_x_clone = Arc::clone(&current_x);
        
        let handle = thread::spawn(move || {
            infinite_euclid_search_thread(
                thread_id,
                tx_clone,
                found_count_clone,
                checked_count_clone,
                current_x_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let found_count_for_msg = Arc::clone(&found_count);
    let checked_count_for_msg = Arc::clone(&checked_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                EuclidThreadMessage::PerfectFound { 
                    thread_id, x, mersenne_number, perfect_number, type_name,
                    mersenne_time, perfect_time, verification_time, decimal_length
                } => {
                    let global_found = found_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{} –ü–û –§–û–†–ú–£–õ–ï –ï–í–ö–õ–ò–î–ê!", global_found);
                    println!("   üìè –ü–æ–∫–∞–∑–∞—Ç–µ–ª—å x: {}", x);
                    println!("   üî¢ –ß–∏—Å–ª–æ –ú–µ—Ä—Å–µ–Ω–Ω–∞ 2^{}-1: {}", x, mersenne_number);
                    println!("   üéØ –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ: {}", perfect_number);
                    println!("   üìä –¢–∏–ø —á–∏—Å–ª–∞: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ú–µ—Ä—Å–µ–Ω–Ω–∞: {:.3?}", mersenne_time);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", perfect_time);
                    println!("   ‚úÖ –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏: {:.3?}", verification_time);
                    println!("   üìê –î–ª–∏–Ω–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö: {}", decimal_length);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}\n", elapsed_total);
                }
                EuclidThreadMessage::Progress { thread_id, current_x, checked_count } => {
                    if checked_count % 500 == 0 {
                        let total_checked = checked_count_for_msg.load(Ordering::SeqCst);
                        let total_found = found_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_checked as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è x={} | –í—Å–µ–≥–æ: {} | –ù–∞–π–¥–µ–Ω–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.2}/—Å–µ–∫", 
                            thread_id, current_x, total_checked, total_found, speed);
                    }
                }
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ)
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
}

fn infinite_euclid_search_thread(
    thread_id: usize,
    tx: mpsc::Sender<EuclidThreadMessage>,
    _found_count: Arc<AtomicUsize>,
    checked_count: Arc<AtomicUsize>,
    current_x: Arc<AtomicUsize>,
) {
    let chunk_size = 1000_u32; // 1000 –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π x –Ω–∞ –±–ª–æ–∫
    let mut checked_in_thread = 0;
    
    loop {
        // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
        let start_x = current_x.fetch_add(chunk_size as usize, Ordering::SeqCst) as u32;
        let end_x = start_x + chunk_size;
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ u32
        if start_x >= u32::MAX - chunk_size {
            println!("‚ö†Ô∏è  –ü–æ—Ç–æ–∫ #{} –¥–æ—Å—Ç–∏–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è u32", thread_id);
            break;
        }
        
        println!("üßµ –ü–æ—Ç–æ–∫ #{} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ x={}-{}", thread_id, start_x, end_x - 1);
        
        for x in start_x..end_x {
            let mersenne_check_start = Instant::now();
            let is_mersenne_prime = DynamicInt::is_mersenne_prime(x);
            let mersenne_time = mersenne_check_start.elapsed();
            
            checked_in_thread += 1;
            checked_count.fetch_add(1, Ordering::SeqCst);
            
            if is_mersenne_prime {
                let perfect_calc_start = Instant::now();
                let mersenne_num = DynamicInt::mersenne_number(x);
                let perfect_num = DynamicInt::euclid_perfect_number(x);
                let perfect_time = perfect_calc_start.elapsed();
                
                // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ—Å—Ç–∏
                let verification_start = Instant::now();
                let _is_actually_perfect = perfect_num.is_perfect();
                let verification_time = verification_start.elapsed();
                
                let decimal_length = perfect_num.to_string_value().len();
                
                let _ = tx.send(EuclidThreadMessage::PerfectFound {
                    thread_id,
                    x,
                    mersenne_number: mersenne_num.to_string_value(),
                    perfect_number: perfect_num.to_string_value(),
                    type_name: perfect_num.get_type_name().to_string(),
                    mersenne_time,
                    perfect_time,
                    verification_time,
                    decimal_length,
                });
            }
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if checked_in_thread % 100 == 0 {
                let _ = tx.send(EuclidThreadMessage::Progress {
                    thread_id,
                    current_x: x,
                    checked_count: checked_in_thread,
                });
            }
        }
        
        println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω x={}-{}, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", 
            thread_id, start_x, end_x - 1);
    }
}

#[derive(Debug)]
enum SingleFactorialThreadMessage {
    PartialResult {
        thread_id: usize,
        start_range: i128,
        end_range: i128,
        partial_product: String,
        calculation_time: std::time::Duration,
        decimal_length: usize,
    },
    Progress {
        thread_id: usize,
        current_progress: f64,
    },
}

// –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞
fn calculate_factorial_multithreaded(n: i128, num_threads: usize) {
    println!("üßÆ –ú–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ {}! —Å {} –ø–æ—Ç–æ–∫–∞–º–∏...\n", n, num_threads);
    
    if n < 0 {
        println!("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–µ–æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª!");
        return;
    }
    
    if n <= 1 {
        println!("üéâ –†–ï–ó–£–õ–¨–¢–ê–¢: {}! = 1", n);
        return;
    }
    
    let start_time = Instant::now();
    let (tx, rx) = mpsc::channel();
    
    // –†–∞–∑–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 1..=n –º–µ–∂–¥—É –ø–æ—Ç–æ–∫–∞–º–∏
    let chunk_size = n / num_threads as i128;
    let remainder = n % num_threads as i128;
    
    let mut handles = Vec::new();
    let mut current_start = 1_i128;
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        
        // –†–∞—Å–ø—Ä–µ–¥–µ–ª—è–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –º–µ–∂–¥—É –ø–µ—Ä–≤—ã–º–∏ –ø–æ—Ç–æ–∫–∞–º–∏
        let current_chunk_size = if thread_id < remainder as usize {
            chunk_size + 1
        } else {
            chunk_size
        };
        
        let range_start = current_start;
        let range_end = current_start + current_chunk_size - 1;
        current_start = range_end + 1;
        
        // –ï—Å–ª–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –ø—É—Å—Ç–æ–π, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫
        if range_start > n {
            break;
        }
        
        let actual_end = std::cmp::min(range_end, n);
        
        let handle = thread::spawn(move || {
            calculate_partial_factorial_thread(
                thread_id,
                range_start,
                actual_end,
                tx_clone,
            );
        });
        
        handles.push(handle);
        println!("üßµ –ü–æ—Ç–æ–∫ #{}: –¥–∏–∞–ø–∞–∑–æ–Ω {}-{} (—Ä–∞–∑–º–µ—Ä: {})", 
            thread_id, range_start, actual_end, actual_end - range_start + 1);
    }
    
    drop(tx);
    
    // –°–æ–±–∏—Ä–∞–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let mut partial_results: Vec<(usize, DynamicInt, std::time::Duration)> = Vec::new();
    
    for result in rx {
        match result {
            SingleFactorialThreadMessage::PartialResult { 
                thread_id, start_range, end_range, partial_product, calculation_time, decimal_length 
            } => {
                println!("‚úÖ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–µ–Ω: –¥–∏–∞–ø–∞–∑–æ–Ω {}-{}", thread_id, start_range, end_range);
                println!("   üìê –î–ª–∏–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {} —Ü–∏—Ñ—Ä", decimal_length);
                println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", calculation_time);
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º DynamicInt –∏–∑ —Å—Ç—Ä–æ–∫–∏ (–ø—Ä–æ—Å—Ç–æ–µ —Ä–µ—à–µ–Ω–∏–µ)
                let partial_result = if partial_product.len() > 50 {
                    // –î–ª—è –±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª –∏—Å–ø–æ–ª—å–∑—É–µ–º BigInt
                    use num_bigint::BigInt;
                    use std::str::FromStr;
                    DynamicInt::Big(BigInt::from_str(&partial_product).unwrap())
                } else {
                    DynamicInt::new(partial_product.parse().unwrap_or(1))
                };
                
                partial_results.push((thread_id, partial_result, calculation_time));
            }
            SingleFactorialThreadMessage::Progress { thread_id, current_progress } => {
                println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≥—Ä–µ—Å—Å {:.1}%", thread_id, current_progress);
            }
        }
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    println!("\nüîó –û–±—ä–µ–¥–∏–Ω—è–µ–º —á–∞—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã...");
    let merge_start = Instant::now();
    
    // –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ thread_id –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –ø–æ—Ä—è–¥–∫–∞ —É–º–Ω–æ–∂–µ–Ω–∏—è
    partial_results.sort_by_key(|(thread_id, _, _)| *thread_id);
    
    let mut final_result = DynamicInt::one();
    for (thread_id, partial_result, thread_time) in partial_results {
        println!("üîó –£–º–Ω–æ–∂–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ—Ç–æ–∫–∞ #{} (–≤—Ä–µ–º—è –ø–æ—Ç–æ–∫–∞: {:.3?})", thread_id, thread_time);
        final_result = final_result.mul(&partial_result);
    }
    
    let merge_time = merge_start.elapsed();
    let total_time = start_time.elapsed();
    let decimal_length = final_result.to_string_value().len();
    
    println!("\nüéâ –†–ï–ó–£–õ–¨–¢–ê–¢ –ú–ù–û–ì–û–ü–û–¢–û–ß–ù–û–ì–û –í–´–ß–ò–°–õ–ï–ù–ò–Ø:");
    println!("   üìä –ß–∏—Å–ª–æ: {}", n);
    println!("   üßÆ –§–∞–∫—Ç–æ—Ä–∏–∞–ª {}!: {}", n, if decimal_length > 100000000 { 
        format!("{}...{} ({} —Ü–∏—Ñ—Ä)", 
            &final_result.to_string_value()[..50], 
            &final_result.to_string_value()[decimal_length-50..], 
            decimal_length)
    } else { 
        final_result.to_string_value() 
    });
    println!("   üî¢ –¢–∏–ø —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞: {}", final_result.get_type_name());
    println!("   üìê –î–ª–∏–Ω–∞ –≤ –¥–µ—Å—è—Ç–∏—á–Ω—ã—Ö –∑–Ω–∞–∫–∞—Ö: {}", decimal_length);
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {:.3?}", merge_time);
    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è: {:.3?}", total_time);
    
     // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if decimal_length > 100 {
        println!("   üí° –ü–µ—Ä–≤—ã–µ 50 —Ü–∏—Ñ—Ä: {}...", &final_result.to_string_value()[..50]);
        println!("   üí° –ü–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Ü–∏—Ñ—Ä: ...{}", &final_result.to_string_value()[decimal_length-50..]);
    }


    // –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö —á–∏—Å–µ–ª
    if n <= 100000 {
        println!("\nüìä –°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–¥–Ω–æ–ø–æ—Ç–æ—á–Ω—ã–º –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ–º:");
        let single_start = Instant::now();
        let single_result = DynamicInt::factorial_of(n);
        let single_time = single_start.elapsed();
        
        println!("   ‚è±Ô∏è  –û–¥–Ω–æ–ø–æ—Ç–æ—á–Ω–æ–µ –≤—Ä–µ–º—è: {:.3?}", single_time);
        let speedup = single_time.as_secs_f64() / total_time.as_secs_f64();
        println!("   ‚ö° –£—Å–∫–æ—Ä–µ–Ω–∏–µ: {:.2}x", speedup);
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å
        if final_result.to_string_value() == single_result.to_string_value() {
            println!("   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
        } else {
            println!("   ‚ùå –û—à–∏–±–∫–∞: —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ —Å–æ–≤–ø–∞–¥–∞—é—Ç!");
        }
    }
}

fn calculate_partial_factorial_thread(
    thread_id: usize,
    start: i128,
    end: i128,
    tx: mpsc::Sender<SingleFactorialThreadMessage>,
) {
    let calculation_start = Instant::now();
    let total_numbers = end - start + 1;
    
    println!("üßµ –ü–æ—Ç–æ–∫ #{} –Ω–∞—á–∞–ª –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è {}-{} ({} —á–∏—Å–µ–ª)", 
        thread_id, start, end, total_numbers);
    
    let partial_result = DynamicInt::product_range(start, end);
    let calculation_time = calculation_start.elapsed();
    let decimal_length = partial_result.to_string_value().len();
    
    let _ = tx.send(SingleFactorialThreadMessage::PartialResult {
        thread_id,
        start_range: start,
        end_range: end,
        partial_product: partial_result.to_string_value(),
        calculation_time,
        decimal_length,
    });
}

fn test_prime_numbers() {
    println!("üî¢ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞...\n");
    
    // –ü–µ—Ä–≤—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞
    let test_primes = vec![2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47];
    
    println!("‚úÖ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞:");
    for num in test_primes {
        let start_time = Instant::now();
        let dynamic_num = DynamicInt::new(num);
        let is_prime = dynamic_num.is_prime();
        let elapsed = start_time.elapsed();
        
        println!("–ß–∏—Å–ª–æ: {} | –ü—Ä–æ—Å—Ç–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            num, 
            if is_prime { "‚úÖ" } else { "‚ùå" },
            dynamic_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\n‚ùå –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Å—Ç–∞–≤–Ω—ã–µ —á–∏—Å–ª–∞:");
    let non_primes = vec![1, 4, 6, 8, 9, 10, 12, 14, 15, 16, 18, 20, 21, 22, 24, 25, 26, 27, 28, 30];
    
    for num in non_primes {
        let start_time = Instant::now();
        let dynamic_num = DynamicInt::new(num);
        let is_prime = dynamic_num.is_prime();
        let elapsed = start_time.elapsed();
        
        println!("–ß–∏—Å–ª–æ: {} | –ü—Ä–æ—Å—Ç–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            num, 
            if is_prime { "‚úÖ" } else { "‚ùå" },
            dynamic_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞!");
}

fn search_primes_in_range(start: i128, end: i128) {
    println!("üîç –ò—â–µ–º –ø—Ä–æ—Å—Ç—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {} –¥–æ {}...\n", start, end);
    
    let mut current = DynamicInt::new(start);
    let one = DynamicInt::one();
    let end_num = DynamicInt::new(end);
    let mut found_count = 0;
    let mut checked_count = 0;
    let total_start_time = Instant::now();
    
    while current.lt(&end_num) {
        let start_time = Instant::now();
        
        if current.is_prime() {
            let elapsed = start_time.elapsed();
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –ü–†–û–°–¢–û–ï –ß–ò–°–õ–û ‚Ññ{}: {}", found_count, current.to_string_value());
            if found_count <= 20 { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 20
                println!("   üî¢ –¢–∏–ø: {} | ‚è±Ô∏è  –í—Ä–µ–º—è: {:.3?}", current.get_type_name(), elapsed);
            }
        }
        
        checked_count += 1;
        current = current.add(&one);
        
        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 —á–∏—Å–µ–ª
        if checked_count % 10000 == 0 {
            let progress = (checked_count as f64 / (end - start) as f64) * 100.0;
            println!("üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —á–∏—Å–µ–ª ({:.1}%)", checked_count, progress);
        }
    }
    
    let total_elapsed = total_start_time.elapsed();
    println!("\nüìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞:");
    println!("   üî¢ –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}", start, end);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª: {}", found_count);
    println!("   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}", checked_count);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_elapsed);
    println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {:.0} —á–∏—Å–µ–ª/—Å–µ–∫", 
        checked_count as f64 / total_elapsed.as_secs_f64());
}

fn find_primes_multithreaded(num_threads: usize, start_num: i128, chunk_size: i128) {
    println!("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üìä –ù–∞—á–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ: {}", start_num);
    println!("   üì¶ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫: {}", chunk_size);
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let found_count = Arc::new(AtomicUsize::new(0));
    let checked_count = Arc::new(AtomicUsize::new(0));
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let found_count_clone = Arc::clone(&found_count);
        let checked_count_clone = Arc::clone(&checked_count);
        let thread_start = start_num + (thread_id as i128 * chunk_size);
        let thread_end = thread_start + chunk_size;
        
        let handle = thread::spawn(move || {
            search_primes_in_range_thread(
                thread_id,
                thread_start,
                thread_end,
                tx_clone,
                found_count_clone,
                checked_count_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let found_count_for_msg = Arc::clone(&found_count);
    let checked_count_for_msg = Arc::clone(&checked_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                PrimeThreadMessage::PrimeFound { thread_id, number, type_name, check_time, total_checked } => {
                    let global_found = found_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –ù–ê–ô–î–ï–ù–û –ü–†–û–°–¢–û–ï –ß–ò–°–õ–û ‚Ññ{}!", global_found);
                    println!("   üìä –ß–∏—Å–ª–æ: {}", number);
                    println!("   üî¢ –¢–∏–ø: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞: {:.3?}", check_time);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}", elapsed_total);
                    println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n", total_checked);
                }
                PrimeThreadMessage::Progress { thread_id, checked_in_thread } => {
                    if checked_in_thread % 50000 == 0 {
                        let total_checked = checked_count_for_msg.load(Ordering::SeqCst);
                        let total_found = found_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_checked as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} | –í—Å–µ–≥–æ: {} | –ù–∞–π–¥–µ–Ω–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.0}/—Å–µ–∫", 
                            thread_id, checked_in_thread, total_checked, total_found, speed);
                    }
                }
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
    
    let total_time = start_time.elapsed();
    let total_checked_final = checked_count.load(Ordering::SeqCst);
    let total_found_final = found_count.load(Ordering::SeqCst);
    
    println!("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:");
    println!("   üßµ –ü–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª: {}", total_found_final);
    println!("   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ —á–∏—Å–µ–ª: {}", total_checked_final);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_time);
    println!("   ‚ö° –û–±—â–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å: {:.0} —á–∏—Å–µ–ª/—Å–µ–∫", total_checked_final as f64 / total_time.as_secs_f64());
}

fn search_primes_in_range_thread(
    thread_id: usize,
    start: i128,
    end: i128,
    tx: mpsc::Sender<PrimeThreadMessage>,
    _found_count: Arc<AtomicUsize>,
    checked_count: Arc<AtomicUsize>,
) {
    let mut current = DynamicInt::new(start);
    let one = DynamicInt::one();
    let end_num = DynamicInt::new(end);
    let mut checked_in_thread = 0;
    
    while current.lt(&end_num) {
        let check_start = Instant::now();
        
        if current.is_prime() {
            let check_time = check_start.elapsed();
            let total_checked = checked_count.load(Ordering::SeqCst);
            
            let _ = tx.send(PrimeThreadMessage::PrimeFound {
                thread_id,
                number: current.to_string_value(),
                type_name: current.get_type_name().to_string(),
                check_time,
                total_checked,
            });
        }
        
        checked_in_thread += 1;
        checked_count.fetch_add(1, Ordering::SeqCst);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        if checked_in_thread % 10000 == 0 {
            let _ = tx.send(PrimeThreadMessage::Progress {
                thread_id,
                checked_in_thread,
            });
        }
        
        current = current.add(&one);
    }
    
    println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–µ–Ω. –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ {} —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {}-{}", 
        thread_id, checked_in_thread, start, end);
}

fn find_primes_infinite_multithreaded(num_threads: usize) {
    println!("‚ôæÔ∏è  –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –º–Ω–æ–≥–æ–ø–æ—Ç–æ—á–Ω—ã–π –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª...");
    println!("   üßµ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Ç–æ–∫–æ–≤: {}", num_threads);
    println!("   üì¶ –†–∞–∑–º–µ—Ä –±–ª–æ–∫–∞ –Ω–∞ –ø–æ—Ç–æ–∫: 1,000,000 —á–∏—Å–µ–ª");
    println!("   ‚ö†Ô∏è  –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let found_count = Arc::new(AtomicUsize::new(0));
    let checked_count = Arc::new(AtomicUsize::new(0));
    let current_start = Arc::new(AtomicUsize::new(2)); // –ù–∞—á–∏–Ω–∞–µ–º —Å 2
    let (tx, rx) = mpsc::channel();
    let start_time = Instant::now();
    
    // –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–æ–∫–∏
    let mut handles = Vec::new();
    
    for thread_id in 0..num_threads {
        let tx_clone = tx.clone();
        let found_count_clone = Arc::clone(&found_count);
        let checked_count_clone = Arc::clone(&checked_count);
        let current_start_clone = Arc::clone(&current_start);
        
        let handle = thread::spawn(move || {
            infinite_search_primes_thread(
                thread_id,
                tx_clone,
                found_count_clone,
                checked_count_clone,
                current_start_clone,
            );
        });
        
        handles.push(handle);
    }
    
    // –ó–∞–∫—Ä—ã–≤–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    drop(tx);
    
    // –ö–ª–æ–Ω–∏—Ä—É–µ–º Arc –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –ø–æ—Ç–æ–∫–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    let found_count_for_msg = Arc::clone(&found_count);
    let checked_count_for_msg = Arc::clone(&checked_count);
    
    // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    let msg_handle = thread::spawn(move || {
        for result in rx {
            match result {
                PrimeThreadMessage::PrimeFound { thread_id, number, type_name, check_time, total_checked } => {
                    let global_found = found_count_for_msg.fetch_add(1, Ordering::SeqCst) + 1;
                    let elapsed_total = start_time.elapsed();
                    
                    println!("üéâ –ù–ê–ô–î–ï–ù–û –ü–†–û–°–¢–û–ï –ß–ò–°–õ–û ‚Ññ{}!", global_found);
                    println!("   üìä –ß–∏—Å–ª–æ: {}", number);
                    println!("   üî¢ –¢–∏–ø: {}", type_name);
                    println!("   üßµ –ü–æ—Ç–æ–∫: #{}", thread_id);
                    println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —á–∏—Å–ª–∞: {:.3?}", check_time);
                    println!("   ‚è∞ –û–±—â–µ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã: {:.2?}", elapsed_total);
                    println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n", total_checked);
                }
                PrimeThreadMessage::Progress { thread_id, checked_in_thread } => {
                    if checked_in_thread % 100000 == 0 {
                        let total_checked = checked_count_for_msg.load(Ordering::SeqCst);
                        let total_found = found_count_for_msg.load(Ordering::SeqCst);
                        let elapsed = start_time.elapsed();
                        let speed = total_checked as f64 / elapsed.as_secs_f64();
                        println!("üîÑ –ü–æ—Ç–æ–∫ #{}: –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ {} | –í—Å–µ–≥–æ: {} | –ù–∞–π–¥–µ–Ω–æ: {} | –°–∫–æ—Ä–æ—Å—Ç—å: {:.0}/—Å–µ–∫", 
                            thread_id, checked_in_thread, total_checked, total_found, speed);
                    }
                }
            }
        }
    });
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –ø–æ—Ç–æ–∫–æ–≤ (–Ω–∏–∫–æ–≥–¥–∞ –Ω–µ —Å–ª—É—á–∏—Ç—Å—è –≤ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–º –ø–æ–∏—Å–∫–µ)
    for handle in handles {
        handle.join().unwrap();
    }
    
    // –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
    msg_handle.join().unwrap();
}

fn infinite_search_primes_thread(
    thread_id: usize,
    tx: mpsc::Sender<PrimeThreadMessage>,
    _found_count: Arc<AtomicUsize>,
    checked_count: Arc<AtomicUsize>,
    current_start: Arc<AtomicUsize>,
) {
    let chunk_size = 1000000_i128; // 1 –º–∏–ª–ª–∏–æ–Ω —á–∏—Å–µ–ª –Ω–∞ –±–ª–æ–∫
    let mut checked_in_thread = 0;
    
    loop {
        // –ê—Ç–æ–º–∞—Ä–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ø–∞–∑–æ–Ω
        let start = current_start.fetch_add(chunk_size as usize, Ordering::SeqCst) as i128;
        let end = start + chunk_size;
        
        println!("üßµ –ü–æ—Ç–æ–∫ #{} –Ω–∞—á–∏–Ω–∞–µ—Ç –ø–æ–∏—Å–∫ –ø—Ä–æ—Å—Ç—ã—Ö —á–∏—Å–µ–ª –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ {}-{}", thread_id, start, end);
        
        let mut current = DynamicInt::new(start);
        let one = DynamicInt::one();
        let end_num = DynamicInt::new(end);
        
        while current.lt(&end_num) {
            let check_start = Instant::now();
            
            if current.is_prime() {
                let check_time = check_start.elapsed();
                let total_checked = checked_count.load(Ordering::SeqCst);
                
                let _ = tx.send(PrimeThreadMessage::PrimeFound {
                    thread_id,
                    number: current.to_string_value(),
                    type_name: current.get_type_name().to_string(),
                    check_time,
                    total_checked,
                });
            }
            
            checked_in_thread += 1;
            checked_count.fetch_add(1, Ordering::SeqCst);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
            if checked_in_thread % 50000 == 0 {
                let _ = tx.send(PrimeThreadMessage::Progress {
                    thread_id,
                    checked_in_thread,
                });
            }
            
            current = current.add(&one);
        }
        
        println!("üèÅ –ü–æ—Ç–æ–∫ #{} –∑–∞–≤–µ—Ä—à–∏–ª –¥–∏–∞–ø–∞–∑–æ–Ω {}-{}, –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É", 
            thread_id, start, end);
    }
}
