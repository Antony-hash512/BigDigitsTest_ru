mod dynamic_int;

use dynamic_int::DynamicInt;
use std::time::Instant;

fn main() {
    println!("üî¢ –ü–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º DynamicInt");
    println!("================================================");
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç –∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª
    //test_known_perfect_numbers();
     find_perfect_numbers();
    // println!("\nüîç –¢–µ–ø–µ—Ä—å –ø–æ–ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ 8128...");
    // search_perfect_numbers_in_range(8129, 50000);
}

fn test_known_perfect_numbers() {
    println!("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–µ—Å—Ç–Ω—ã–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞...\n");
    
    // –ü–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: 6, 28, 496, 8128
    let test_numbers = vec![6, 28, 496, 8128];
    
    for num in test_numbers {
        let start_time = Instant::now();
        let dynamic_num = DynamicInt::new(num);
        let is_perfect = dynamic_num.is_perfect();
        let elapsed = start_time.elapsed();
        
        println!("–ß–∏—Å–ª–æ: {} | –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            num, 
            if is_perfect { "‚úÖ" } else { "‚ùå" },
            dynamic_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\nüîç –¢–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –Ω–µ—Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª:");
    let non_perfect = vec![5, 7, 10, 12, 100, 1000];
    
    for num in non_perfect {
        let start_time = Instant::now();
        let dynamic_num = DynamicInt::new(num);
        let is_perfect = dynamic_num.is_perfect();
        let elapsed = start_time.elapsed();
        
        println!("–ß–∏—Å–ª–æ: {} | –°–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ: {} | –¢–∏–ø: {} | –í—Ä–µ–º—è: {:.3?}",
            num, 
            if is_perfect { "‚úÖ" } else { "‚ùå" },
            dynamic_num.get_type_name(),
            elapsed
        );
    }
    
    println!("\nüéØ –†–µ–∑—É–ª—å—Ç–∞—Ç: –∞–ª–≥–æ—Ä–∏—Ç–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞!");
}

fn search_perfect_numbers_in_range(start: i128, end: i128) {
    println!("üîç –ò—â–µ–º —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —á–∏—Å–ª–∞ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç {} –¥–æ {}...\n", start, end);
    
    let mut current = DynamicInt::new(start);
    let one = DynamicInt::one();
    let end_num = DynamicInt::new(end);
    let mut found_count = 0;
    let mut checked_count = 0;
    let total_start_time = Instant::now();
    
    while current.lt(&end_num) {
        let start_time = Instant::now();
        
        if current.is_perfect() {
            let elapsed = start_time.elapsed();
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{}!", found_count);
            println!("   üìä –ß–∏—Å–ª–æ: {}", current.to_string_value());
            println!("   üî¢ –¢–∏–ø: {}", current.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {:.3?}", elapsed);
            println!("   üìç –ü–æ–∑–∏—Ü–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ: {}/{}\n", 
                current.to_string_value(), end);
        }
        
        checked_count += 1;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É
        current = current.add(&one);
        
        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 5000 —á–∏—Å–µ–ª
        if checked_count % 5000 == 0 {
            let progress = (checked_count as f64 / (end - start) as f64) * 100.0;
            println!("üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —á–∏—Å–µ–ª ({:.1}%)", checked_count, progress);
        }
    }
    
    let total_elapsed = total_start_time.elapsed();
    println!("\nüìä –ò—Ç–æ–≥–∏ –ø–æ–∏—Å–∫–∞:");
    println!("   üî¢ –î–∏–∞–ø–∞–∑–æ–Ω: {} - {}", start, end);
    println!("   ‚úÖ –ù–∞–π–¥–µ–Ω–æ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª: {}", found_count);
    println!("   üìã –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}", checked_count);
    println!("   ‚è±Ô∏è  –û–±—â–µ–µ –≤—Ä–µ–º—è: {:.2?}", total_elapsed);
    println!("   ‚ö° –°–∫–æ—Ä–æ—Å—Ç—å: {:.0} —á–∏—Å–µ–ª/—Å–µ–∫", 
        checked_count as f64 / total_elapsed.as_secs_f64());
    
    if found_count == 0 {
        println!("   üí° –°–ª–µ–¥—É—é—â–µ–µ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω–æ–µ —á–∏—Å–ª–æ –ø–æ—Å–ª–µ 8128 = 33550336 (–æ—á–µ–Ω—å –±–æ–ª—å—à–æ–µ!)");
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ (–∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
fn find_perfect_numbers() {
    println!("üîç –ù–∞—á–∏–Ω–∞–µ–º –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π –ø–æ–∏—Å–∫ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö —á–∏—Å–µ–ª...\n");
    println!("‚ö†Ô∏è  –í–Ω–∏–º–∞–Ω–∏–µ: —ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –æ—á–µ–Ω—å –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏!");
    println!("   –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏\n");
    
    let mut current = DynamicInt::new(2); // –ù–∞—á–∏–Ω–∞–µ–º —Å 2
    let one = DynamicInt::one();
    let mut found_count = 0;
    let mut checked_count = 0;
    
    loop {
        let start_time = Instant::now();
        
        if current.is_perfect() {
            let elapsed = start_time.elapsed();
            found_count += 1;
            
            println!("üéâ –ù–ê–ô–î–ï–ù–û –°–û–í–ï–†–®–ï–ù–ù–û–ï –ß–ò–°–õ–û ‚Ññ{}!", found_count);
            println!("   üìä –ß–∏—Å–ª–æ: {}", current.to_string_value());
            println!("   üî¢ –¢–∏–ø: {}", current.get_type_name());
            println!("   ‚è±Ô∏è  –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: {:.2?}", elapsed);
            println!("   üìç –í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {}\n", checked_count);
        }
        
        checked_count += 1;
        
        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —á–∏—Å–ª—É
        current = current.add(&one);
        
        // –î–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤—ã–≤–æ–¥–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10000 —á–∏—Å–µ–ª
        //if checked_count % 1000000 == 0 {
        //    println!("üîÑ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ: {} —á–∏—Å–µ–ª", checked_count);
        //}
    }
}

fn test1() {
    // –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    let num1 = DynamicInt::new(i128::MAX - 10);
    let num2 = DynamicInt::new(20);

    println!("num1: {}", num1.to_string_value());
    println!("num2: {}", num2.to_string_value());

    // –°–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã–∑—ã–≤–∞–µ—Ç –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∏–µ i128
    let sum = num1.add(&num2);
    println!("–°—É–º–º–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è Big): {}", sum.to_string_value());
    if let DynamicInt::Big(_) = sum {
        println!("–°—É–º–º–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–ª–∞ BigInt!");
    }

    let small_sum = DynamicInt::new(5).add(&DynamicInt::new(10));
    println!("–ú–∞–ª–∞—è —Å—É–º–º–∞ (–æ–∂–∏–¥–∞–µ—Ç—Å—è Small): {}", small_sum.to_string_value());
    if let DynamicInt::Small(_) = small_sum {
        println!("–ú–∞–ª–∞—è —Å—É–º–º–∞ –æ—Å—Ç–∞–ª–∞—Å—å Small!");
    }

    // –£–º–Ω–æ–∂–µ–Ω–∏–µ
    let large_num_i128 = i128::MAX / 2;
    let mul1 = DynamicInt::new(large_num_i128);
    let mul2 = DynamicInt::new(3); // –£–º–Ω–æ–∂–µ–Ω–∏–µ –Ω–∞ 3 –ø–µ—Ä–µ–ø–æ–ª–Ω–∏—Ç i128::MAX

    println!("\nmul1: {}", mul1.to_string_value());
    println!("mul2: {}", mul2.to_string_value());

    let product = mul1.mul(&mul2);
    println!("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ (–æ–∂–∏–¥–∞–µ—Ç—Å—è Big): {}", product.to_string_value());
    if let DynamicInt::Big(_) = product {
        println!("–ü—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Å—Ç–∞–ª–æ BigInt!");
    }
}
